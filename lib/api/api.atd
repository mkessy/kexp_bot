type t <ocaml module="Yojson.Safe"> = abstract

type play = {
    id: int;
    uri: string;
    airdate: string;
    show: int;
    play_type: string;
    show_uri: string;
    ?image_uri: string option;
    ?thumbnail_uri: string option;
    ?comment: string option;
    ?song: string option;
    ?track_id: string option;
    ?recording_id: string option;
    ?artist: string option;
    ?artist_ids: string list option;
    ?album: string option;
    ?released_id: string option;
    ?release_group_id: string option;
    ?labels: string list option;
    ?label_ids: string list option;
    ?release_date: string option;
    ?rotation_status: string option;
    ?is_local: bool option;
    ?is_request: bool option;
    ?is_live: bool option;
}

type show = {
    id: int;
    uri: string;
    program: int;
    program_uri: string;
    hosts: int list;
    host_uris: string list;
    program_name: string;
    program_tags: string;
    host_names: string list;
    tagline: string;
    image_uri: string;
    start_time: string;
}

type program = {
    id: int;
    uri: string;
    name: string;
    tags: string;
    description: string;
    is_active: bool;
}

type program_response = {
    ?next: string option;
    ?previous: string option;
    results: program list;
}


type plays_response = {
    ?next: string option;
    ?previous: string option;
    results: play list;
}

type shows_response = {
    ?next: string option;
    ?previous: string option;
    results: show list;
}

(* Define a type for thumbnails with different resolutions *)
type thumbnail = {
  ?two_fifty <json name="250"> : string option;
  ?five_hundred <json name="500">: string option;
  ?twelve_hundred <json name="1200">: string option;
  ?small: string option;
  ?large: string option;
}

(* Define a type for an image, including its thumbnails and other properties *)
type image = {
  edit: int;
  id: int;
  image: string;
  thumbnails: thumbnail;
  comment: string;
  approved: bool;
  front: bool;
  types: string list;
  back: bool;
}

(* Define a type for the overall response from the /release-group/{release_group_id} endpoint *)
type release_group_response = {
  release: string;
  images: image list;
}


type role = [
  | User <json name="user">
  | Assistant <json name="assistant">
]

type message = {
  role: role;
  content: string;
}

type text_content_block = {
  type_ <json name="type">: string;
  text: string;
}

type content_block = text_content_block

type tool = {
  name: string;
  description: string option;
  input_schema: t;
}

type metadata = {
  ?stop_sequences: string list option;
  ?stream: bool option;
  ?system: string option;
  ?temperature: float option;
  tools: tool option list;
  ?top_k: int option;
  ?top_p: float option;
}

type request_message = {
  model: string;
  messages: message list;
  max_tokens: int;
  ?metadata: metadata option;
}

type stop_reason = [
  | EndTurn <json name="end_turn">
  | MaxTokens <json name="max_tokens">
  | StopSequence <json name="stop_sequence">
]

type usage = {
  input_tokens: int;
  output_tokens: int;
}

type response = {
  id: string;
  type_ <json name="type">: string;
  role: role;
  content: content_block list;
  model: string;
  stop_reason: stop_reason;
  ?stop_sequence: string option;
  usage: usage;
}